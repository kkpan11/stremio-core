searchState.loadedDescShard("stremio_core", 0, "Stremio core\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequest a resource from the addon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>https://{ADDON_URL}/catalog/...</code> resource\nOnly found in Cinemeta catalogs, i.e. <code>CINEMETA_CATALOGS_URL</code>\nManifest URL for Cinemeta V3\n<code>https://{ADDON_UR}/meta/...</code> resource\nIn milliseconds\nThe latest migration scheme version\nA <code>LibraryItem</code> is considered watched once we’ve watched …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExternal URI for Android TV\nFilename of the playlist\nReturns the argument unchanged.\nCreate an <code>ExternalPlayerLink</code> using the <code>Stream</code>, the server …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>StreamDeepLinks</code> using the <code>Stream</code>, stream request, …\nCreate a <code>StreamDeepLinks</code> using the <code>Stream</code>, the server url …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nm3u data URI\nExternal payload for Tizen\nExternal URL for Web\nExternal payload for webOS\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLocal autocompletion search\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFetching addons\nRequests the addon <code>Descriptor</code>\nLoads the manifest for the addon of the <code>Descriptor</code>\nWhen we want to fetch meta items, streams and catalogs\nCompare <code>a</code> and <code>b</code> based on provided priority. Priorities …\nRequest or Load Addon <code>Descriptor</code> on the <code>descriptor</code> …\nThe transport_url is unique for every addon.\nCompare <code>a</code> and <code>b</code> based on provided priority. Priorities …\nFetching addons\nRequests the addon <code>Descriptor</code>\nLoads the manifest for the addon of the <code>Descriptor</code>\nRequest or Load Addon <code>Descriptor</code> on the <code>descriptor</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe transport_url is unique for every addon.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhen we want to fetch meta items, streams and catalogs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe continue watching section in the app\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\na count of the total notifications we have for this item\nUsed only for loading the Descriptor and then the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed only for loading the Descriptor and then the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is the Loading result of the User data export request.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the variants of Sort\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Sort</code>ing the two given <code>LibraryItem</code>s for the Library\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWith a scale between 0 and 10 in either a floating or …\nLocal search functionality for the search engine’s …\nA percentage can only be between 0 and 100.\nFailed to parse number.\nA searchable item\nThe response returned when fetching the searchable items …\nThe Searchable items that will be used for the local …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nfetches the <code>/feed.js</code> using the given <code>Url</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA loadable resource in order to be able to search for …\nSome deleted or duplicated ids might not have the name …\nThe results of the search autocompletion\nWith a scale between 0 and 10 in either a floating or …\nA percentage can only be between 0 and 100.\nFailed to parse number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nif <code>stream_path</code> is <code>None</code> then we try to guess the video and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf <code>Selected::guess_stream</code> is <code>true</code> then we will override …\nFind a stream from addon responses, which should be played …\nThe duration that must have passed in order for a library …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpensubtitles hash usually retrieved from a streaming …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA request to fetch the selected <code>MetaItem</code>.\nWe will push an <code>Internal::UpdateLibraryItem</code> message only if\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Loadable::Loading</code> is used only on the first statistics …\nExamples\nError returned on <code>Env::fetch</code>\nSerde error when serializing\nThe effects to be applied\nWhether or not the effects are changing something in the …\nExamples\nThe effects to be applied\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether or not the effects are changing something in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are any effects\nReturns the amount of effects\nmark model as not changed\nError returned on <code>Env::fetch</code>\nSerde error when serializing\nOnly for wasm or when <code>env-future-send</code> is not enabled\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAction messages\nResult for pull addons from API.\nDispatched when requesting search on catalogs.\nResult for authenticate to API.\nResult for requesting a <code>dataExport</code> of user data.\nDismiss an event by id, either a Modal or Notification\nDismiss all Notification for a given <code>MetaItemId</code>.\nDismiss all Notifications for a given <code>MetaItemId</code>.\nWhen dismissed events changed\nVideo player has ended.\nThose messages are meant to be dispatched by the …\nMake request to api to get events modal and notification\nResult for getModal request\nResult for getNotification request\nDispatched when addons needs to be installed.\nInternal event dispatched on user action or login to …\nDispatched when library changes with a flag if its already …\nThe LibraryItem with the given id has been marked as …\nResult for pull library items from API.\nResult for library sync plan with API.\nResult for loading link code.\nResult for loading link data.\nThe result of querying the data for LocalSearch\nLoads the data required for Local search\nDispatched when expired session is detected\nResult for fetching manifest from addon.\nMarks the <code>LibraryItem</code> as watched.\nMarks the given <code>Video</code> of the <code>LibraryItem</code> as watched.\nUser has clicked on the next video button.\nUser notifications have changed\nThe notifications for the given LibraryItemId have been …\nTODO: write some obvious comment about what it is\nDispatched when some of auth, addons or settings changed.\nPull notifications for all <code>LibraryItem</code>s that we should …\nPulling of notifications triggered either by the user …\nResult for fetching resource from addons.\nRequest for Search queries\nSearch history has changed.\nResult for submitting SeekLogs request for a played stream.\nRetrieve the skip gaps for skipping intro and outro.\nDispatched when a new stream is loaded into the Player.\nDispatched when stream item’s state has changed\nResult for loading streaming server base url.\nResult for creating a torrent.\nResult for playing on device.\nResult for loading streaming server settings.\nResult for streaming server statistics.\nResult for updating streaming server settings.\nDispatched when streams bucket changes with a flag if its …\nIf boolean is set to <code>true</code> it will disable notifications …\nDispatched when addons needs to be uninstalled.\nDispatched when library item needs to be updated in the …\nResult for pull user from API.\nAction messages\nDismiss an event by id, either a Modal or Notification\nDismiss all Notification for a given <code>MetaItemId</code>.\nVideo player has ended.\nMake request to api to get events modal and notification\nLoads the data required for Local search\nMarks the <code>LibraryItem</code> as watched.\nMarks the given <code>Video</code> of the <code>LibraryItem</code> as watched.\nUser has clicked on the next video button.\nPull notifications for all <code>LibraryItem</code>s that we should …\nRequest for Search queries\nIf boolean is set to <code>true</code> it will disable notifications …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThose messages are meant to be dispatched by the …\nThe LibraryItem with the given id has been marked as …\nThe notifications for the given LibraryItemId have been …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResult for pull addons from API.\nDispatched when requesting search on catalogs.\nResult for authenticate to API.\nResult for requesting a <code>dataExport</code> of user data.\nDismiss all Notifications for a given <code>MetaItemId</code>.\nWhen dismissed events changed\nResult for getModal request\nResult for getNotification request\nDispatched when addons needs to be installed.\nInternal event dispatched on user action or login to …\nDispatched when library changes with a flag if its already …\nResult for pull library items from API.\nResult for library sync plan with API.\nResult for loading link code.\nResult for loading link data.\nThe result of querying the data for LocalSearch\nDispatched when expired session is detected\nResult for fetching manifest from addon.\nUser notifications have changed\nTODO: write some obvious comment about what it is\nDispatched when some of auth, addons or settings changed.\nPulling of notifications triggered either by the user …\nResult for fetching resource from addons.\nSearch history has changed.\nResult for submitting SeekLogs request for a played stream.\nRetrieve the skip gaps for skipping intro and outro.\nDispatched when a new stream is loaded into the Player.\nDispatched when stream item’s state has changed\nResult for loading streaming server base url.\nResult for creating a torrent.\nResult for playing on device.\nResult for loading streaming server settings.\nResult for streaming server statistics.\nResult for updating streaming server settings.\nDispatched when streams bucket changes with a flag if its …\nDispatched when addons needs to be uninstalled.\nDispatched when library item needs to be updated in the …\nResult for pull user from API.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAddon descriptor\nthe extra supports a list of ids\nResources supported by the addon.\n<code>MetaItemPreview</code> response without the <code>videos</code> key of an item\nThe full resource path, query, etc. for Addon requests\nResource Response from an addon.\nResource response that handles the optional cache values …\nShort resource format defines only the <code>name</code> of the resource\nRe-export the semver::Version <strong>SemVer version</strong> as defined by …\n(in seconds) which sets the <code>Cache-Control</code> header to …\nExtra query parameters to be passed to the endpoint\nReturns the argument unchanged.\nThe id of the endpoint that we want to request. This …\nGlobally supported id prefixes by the addon.\nCalls <code>U::from(self)</code>.\nCreate <code>Version</code> with an empty pre-release and build …\nThe maximum options that should be passed for this addon …\nCreate <code>Version</code> by parsing from string representation.\nThe resource we want to fetch from the addon.\nResources\n(in seconds) which sets the <code>Cache-Control</code> header to …\n(in seconds) which sets the <code>Cache-Control</code> header to …\nE.g. <code>movie</code>, <code>series</code>\nExamples\nGlobally supported types. We consider the addon to not …\nThe extra name. It will be checked against the addon …\nIds must be ordered if we want to correctly limit the …\nA set limit on the requested ids per addon. The smaller …\nThe id prefixes should be a subset of the ones defined in …\nThe types should be a subset of the ones defined in …\nAddon descriptor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResources supported by the addon.\nShort resource format defines only the <code>name</code> of the resource\nRe-export the semver::Version <strong>SemVer version</strong> as defined by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobally supported id prefixes by the addon.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum options that should be passed for this addon …\nResources\nE.g. <code>movie</code>, <code>series</code>\nGlobally supported types. We consider the addon to not …\nThe id prefixes should be a subset of the ones defined in …\nThe types should be a subset of the ones defined in …\nthe extra supports a list of ids\nThe full resource path, query, etc. for Addon requests\nExtra query parameters to be passed to the endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe id of the endpoint that we want to request. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe resource we want to fetch from the addon.\nExamples\nThe extra name. It will be checked against the addon …\nIds must be ordered if we want to correctly limit the …\nA set limit on the requested ids per addon. The smaller …\n<code>MetaItemPreview</code> response without the <code>videos</code> key of an item\nResource Response from an addon.\nResource response that handles the optional cache values …\n(in seconds) which sets the <code>Cache-Control</code> header to …\nCustom deserialize for ResourceResponse which expects only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(in seconds) which sets the <code>Cache-Control</code> header to …\n(in seconds) which sets the <code>Cache-Control</code> header to …\nAPI response for the <code>LibraryItem</code>s which skips invalid items\nSends Seek log request to the API\nRetrieve Skip gaps for Intro and Outro in movie series …\nReturns the matched attribute: Opensubtitles Hash, File …\nUser’s Auth Key, this requests requires premium account.\nin milliseconds\nThe key of the map is the duration of video and the value …\nOpensubtitles hash returned by the server\nOpensubtitles hash returned by the server\nThe time (in milliseconds) when the user decided to play …\nStream name hash\nStream name hash\nin milliseconds\nSends Seek log request to the API\nRetrieve Skip gaps for Intro and Outro in movie series …\nVersion path prefix for the request\nVersion path prefix for the request\nUser’s Auth Key, this requests requires premium account.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nin milliseconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOpensubtitles hash returned by the server\nOpensubtitles hash returned by the server\nThe time (in milliseconds) when the user decided to play …\nStream name hash\nStream name hash\nin milliseconds\nReturns the versioned path for the API request.\nReturns the versioned path for the API request.\nAPI response for the <code>LibraryItem</code>s which skips invalid items\nReturns the matched attribute: Opensubtitles Hash, File …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe key of the map is the duration of video and the value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe key is the event (modal or notification) that has been …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthe key is the event (modal or notification) that has been …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreation time\nIn milliseconds\nFlag indicating that a movie has been watched\n<code>HashMap</code> Key is the <code>LibraryItem</code><code>.id</code>.\nIndicates the last time this <code>LibraryItem</code> was watched and:\nModification time\nWeather or not to receive notification for the given …\nIn milliseconds\nIn milliseconds\nIn milliseconds\nShows how many times this item has been watched.\nUser ID\nThe last video watched.\nField tracking watched videos. For <code>LibraryItem</code>s without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>HashMap</code> Key is the <code>LibraryItem</code><code>.id</code>.\nUser ID\nCreation time\nIn milliseconds\nFlag indicating that a movie has been watched\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates the last time this <code>LibraryItem</code> was watched and:\nModification time\nWeather or not to receive notification for the given …\nIn milliseconds\nReturns watch progress percentage\nPulling notifications relies on a few key things:\nIn milliseconds\nIn milliseconds\nShows how many times this item has been watched.\nThe last video watched.\nReturns whether the item has been watched\nField tracking watched videos. For <code>LibraryItem</code>s without …\nThe moment that the notification bucket was initialized.\nNotifications per meta item and video id\nThe last time notifications were pulled.\nNotification meta item id\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNotification meta item id\nThe moment that the notification bucket was initialized.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNotifications per meta item and video id\nThe last time notifications were pulled.\n<code>Some</code> if the difference between the skip gap data and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nUser ID\nThis locking flag is raised when the API addon fetch …\nWhether or not the Escape key should exists from the app …\nWhether we should pause the playback when the application …\nThe Seek short time duration (in milliseconds) is when we …\nThe Seek time duration (in milliseconds) is when using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nSome value of type <code>T</code>.\nUser ID\nThis locking flag is raised when the API addon fetch …\nReturns the argument unchanged.\nReturns the argument unchanged.\ncheck whether the user has Trakt authentication token will …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not the Escape key should exists from the app …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether we should pause the playback when the application …\nThe Seek short time duration (in milliseconds) is when we …\nThe Seek time duration (in milliseconds) is when using the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>MetaItem</code> Id type to improve the readability of the …\nExamples\nSee …\nExamples\nThe <code>Video</code> Id type to improve the readability of the code.\nThe <code>MetaItem</code> Id type to improve the readability of the …\nThe <code>Video</code> Id type to improve the readability of the code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over references to Video, skipping …\nExamples\nSee …\nExamples\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStreamItemState is to be used when user intentionally …\nIn milliseconds\nFlag indicating whether this is an embedded subtitles or …\nId of the subtitle track\nId of the audio track\nOptional string indicating subtitle language. This value …\nOptional string indicating audio language. This value …\nModification time\nIn milliseconds\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStreamItemState is to be used when user intentionally …\nRetrieve adjusted stream state based on given stream: If …\nIn milliseconds\nFlag indicating whether this is an embedded subtitles or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nId of the subtitle track\nId of the audio track\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional string indicating subtitle language. This value …\nOptional string indicating audio language. This value …\nModification time\nIn milliseconds\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")